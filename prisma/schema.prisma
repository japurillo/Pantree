// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Family {
  id          String   @id @default(cuid())
  name        String
  adminId     String?  @unique // Optional initially, will be set after user creation
  settings    Json?    // Family-specific settings (thresholds, notifications, etc.)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  admin   User?    @relation("FamilyAdmin", fields: [adminId], references: [id], onDelete: Cascade)
  members User[]   @relation("FamilyMembers")
  items   Item[]
  categories Category[]

  @@map("families")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique // Global unique across all families
  email     String   @unique
  password  String
  role      Role     @default(USER)
  familyId  String?  // Optional initially, will be set after family creation
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Family relationships
  family        Family? @relation("FamilyMembers", fields: [familyId], references: [id], onDelete: Cascade)
  adminOfFamily Family? @relation("FamilyAdmin")
  
  // Items created by this user
  items Item[]

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String   // Not unique globally, but unique per family
  description String?
  familyId    String   // Categories are family-specific
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  family Family @relation(fields: [familyId], references: [id], onDelete: Cascade)
  items Item[]

  @@unique([name, familyId]) // Unique name per family

  @@map("categories")
}

model Item {
  id          String   @id @default(cuid())
  name        String
  description String?
  imageUrl    String?
  quantity    Int      @default(0)
  threshold   Int      @default(1)
  notes       String?
  categoryId  String
  createdBy   String
  familyId    String   // Items belong to a family
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  family   Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)

  @@map("items")
}

enum Role {
  USER
  ADMIN
}
